[{"/Users/truecoders/repos/react/memory-game-complete/src/reportWebVitals.js":"1","/Users/truecoders/repos/react/memory-game-complete/src/index.js":"2","/Users/truecoders/repos/react/memory-game-complete/src/App.jsx":"3","/Users/truecoders/repos/react/memory-game-complete/src/components/GameItem.jsx":"4","/Users/truecoders/repos/react/memory-game-complete/src/components/Congratulations.jsx":"5"},{"size":362,"mtime":1610558649246,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1610559397209,"results":"8","hashOfConfig":"7"},{"size":5496,"mtime":1613149885163,"results":"9","hashOfConfig":"7"},{"size":385,"mtime":1613146462724,"results":"10","hashOfConfig":"7"},{"size":324,"mtime":1613146782433,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1irk0j8",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/truecoders/repos/react/memory-game-complete/src/reportWebVitals.js",[],"/Users/truecoders/repos/react/memory-game-complete/src/index.js",[],"/Users/truecoders/repos/react/memory-game-complete/src/App.jsx",["24"],"import \"./App.css\";\nimport React, { Component } from \"react\";\nimport GameItem from \"./components/GameItem\";\nimport Congratulations from \"./components/Congratulations\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const best = localStorage.getItem(\"best\");\n\n    this.state = {\n      score: 0,\n      bestScore: best ? best : 0,\n      numbers: [\n        {\n          content: \"ichi\",\n          wasViewed: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"ni\",\n          wasViewed: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"san\",\n          wasViewed: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"shi\",\n          wasViewed: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"go\",\n          wasViewed: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"roku\",\n          wasViewed: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"shichi\",\n          wasViewed: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"hachi\",\n          wasViewed: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"kyuu\",\n          wasViewed: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"juu\",\n          wasViewed: false,\n          color: this.randomHEX(),\n        },\n      ],\n    };\n\n    this.checkScore = this.checkScore.bind(this);\n    this.randomizeNumbers = this.randomizeNumbers.bind(this);\n  }\n\n  randomHEX() {\n    return Math.floor(Math.random() * 16777215).toString(16);\n  }\n\n  flashCongratulations() {\n    const congrats = document.getElementById(\"congratulations\");\n    congrats.classList.toggle(\"show-congrats\");\n    setTimeout(() => congrats.classList.toggle(\"show-congrats\"), 5000);\n  }\n\n  checkScore(item, answer) {\n    let tempArray = this.randomizeNumbers();\n    // Checks item has been click vs user answer\n    if (item.wasViewed === answer) {\n      let incrementedScore = this.state.score + 1;\n      // Correct answer\n      // Continue playing the game, increasing the score\n      if (incrementedScore === 10) {\n        // User has won the game\n        // Reset game, save best score\n\n        // Display congratulations message\n        this.flashCongratulations();\n\n        // Set score to 0, save best score, randomize numbers\n        localStorage.setItem(\"best\", incrementedScore);\n        this.setState({\n          score: 0,\n          bestScore: incrementedScore,\n          numbers: tempArray,\n        });\n      } else {\n        // Continue playing\n        tempArray.forEach((num) => {\n          if (num.content == item.content) {\n            num.wasViewed = true;\n          }\n        });\n        const newBest =\n          this.state.bestScore > incrementedScore\n            ? this.state.bestScore\n            : incrementedScore;\n\n        localStorage.setItem(\"best\", newBest);\n        \n        this.setState({\n          score: incrementedScore,\n          bestScore: newBest,\n          numbers: tempArray,\n        });\n      }\n    } else {\n      // Incorrect answer, reset game\n      // ========= REFACTOR TO DRY\n      tempArray.forEach((item) => {\n        item.wasViewed = false;\n      });\n      this.setState({\n        score: 0,\n        bestScore:\n          this.state.bestScore > this.state.score\n            ? this.state.bestScore\n            : this.state.score,\n        numbers: tempArray,\n      });\n    }\n  }\n\n  randomizeNumbers() {\n    let array = this.state.numbers;\n    let index = this.state.numbers.length,\n      temporaryIndex,\n      randomIndex;\n\n    while (0 !== index) {\n      randomIndex = Math.floor(Math.random() * index);\n      index -= 1;\n\n      temporaryIndex = array[index];\n      array[index] = array[randomIndex];\n      array[index].color = this.randomHEX();\n      array[randomIndex] = temporaryIndex;\n      array[randomIndex].color = this.randomHEX();\n    }\n\n    return array;\n  }\n\n  componentDidMount() {\n    let array = this.randomizeNumbers();\n    this.setState({ numbers: array });\n  }\n\n  render() {\n    const randomIndex = Math.floor(Math.random() * this.state.numbers.length);\n    const selectedNum = this.state.numbers[randomIndex];\n\n    return (\n      <main className=\"App\">\n        <header className=\"App-header\">\n          <h1>React Memory Game</h1>\n          <p>\n            Objective: Answer the questions to test your memory.<br></br>\n            Highest score is 10!\n          </p>\n          <div className=\"App-scoreboard\">\n            <span>Score: {this.state.score}</span>\n            <span>Best Score: {this.state.bestScore}</span>\n          </div>\n        </header>\n        <section className=\"App-container\">\n          <Congratulations />\n          <div className=\"App-item-container\">\n            <GameItem value={selectedNum} />\n            <div>\n              <h3>Have you seen this number yet?</h3>\n              <button\n                id=\"no\"\n                className=\"btn\"\n                onClick={() => this.checkScore(selectedNum, false)}\n              >\n                No\n              </button>\n              <button\n                id=\"yes\"\n                className=\"btn\"\n                onClick={() => this.checkScore(selectedNum, true)}\n              >\n                Yes\n              </button>\n            </div>\n          </div>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","/Users/truecoders/repos/react/memory-game-complete/src/components/GameItem.jsx",["25"],"import \"./GameItem.css\";\nimport * as React from \"react\";\n\nclass GameItem extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n  render() {\n    return (\n      <div\n        className=\"GameItem-div\"\n        style={{ backgroundColor: \"#\" + this.props.value.color }}\n      >\n        <p>{this.props.value.content}</p>\n      </div>\n    );\n  }\n}\n\nexport default GameItem;\n","/Users/truecoders/repos/react/memory-game-complete/src/components/Congratulations.jsx",[],{"ruleId":"26","severity":1,"message":"27","line":107,"column":27,"nodeType":"28","messageId":"29","endLine":107,"endColumn":29},{"ruleId":"30","severity":1,"message":"31","line":5,"column":3,"nodeType":"32","messageId":"33","endLine":7,"endColumn":4},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]