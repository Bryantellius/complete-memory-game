[{"/Users/truecoders/repos/react/memory-game-complete/src/reportWebVitals.js":"1","/Users/truecoders/repos/react/memory-game-complete/src/index.js":"2","/Users/truecoders/repos/react/memory-game-complete/src/App.jsx":"3","/Users/truecoders/repos/react/memory-game-complete/src/components/GameItem.jsx":"4","/Users/truecoders/repos/react/memory-game-complete/src/components/Congratulations.jsx":"5"},{"size":362,"mtime":1610558649246,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1610559397209,"results":"8","hashOfConfig":"7"},{"size":4725,"mtime":1613143286968,"results":"9","hashOfConfig":"7"},{"size":391,"mtime":1613100438437,"results":"10","hashOfConfig":"7"},{"size":326,"mtime":1613137813244,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1irk0j8",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/truecoders/repos/react/memory-game-complete/src/reportWebVitals.js",[],"/Users/truecoders/repos/react/memory-game-complete/src/index.js",[],"/Users/truecoders/repos/react/memory-game-complete/src/App.jsx",["23"],"import \"./App.css\";\nimport * as React from \"react\";\nimport GameItem from \"./components/GameItem\";\nimport Congratulations from \"./components/Congratulations\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      score: 0,\n      bestScore: 0,\n      numbers: [\n        {\n          content: \"ichi\",\n          wasClicked: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"ni\",\n          wasClicked: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"san\",\n          wasClicked: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"shi\",\n          wasClicked: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"go\",\n          wasClicked: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"roku\",\n          wasClicked: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"shichi\",\n          wasClicked: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"hachi\",\n          wasClicked: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"kyuu\",\n          wasClicked: false,\n          color: this.randomHEX(),\n        },\n        {\n          content: \"juu\",\n          wasClicked: false,\n          color: this.randomHEX(),\n        },\n      ],\n    };\n\n    this.checkScore = this.checkScore.bind(this);\n    this.randomizeNumbers = this.randomizeNumbers.bind(this);\n  }\n\n  randomHEX() {\n    return Math.floor(Math.random() * 16777215).toString(16);\n  }\n\n  flashCongratulations() {\n    const congrats = document.getElementById(\"congratulations\");\n    congrats.classList.toggle(\"show-congrats\");\n    setTimeout(() => congrats.classList.toggle(\"show-congrats\"), 5000);\n  }\n\n  checkScore(item) {\n    let tempArray = this.randomizeNumbers();\n    // User is still playing\n    if (item.wasClicked) {\n      // User has lost and the game resets\n      tempArray.forEach((item) => {\n        item.wasClicked = false;\n      });\n      this.setState({\n        score: 0,\n        bestScore:\n          this.state.bestScore > this.state.score\n            ? this.state.bestScore\n            : this.state.score,\n        numbers: tempArray,\n      });\n    } else {\n      if (this.state.score === 9) {\n        // User has won the game\n        tempArray.forEach((item) => {\n          item.wasClicked = false;\n        });\n        this.setState({\n          score: 0,\n          bestScore: 10,\n          numbers: tempArray,\n        });\n        this.flashCongratulations();\n      } else {\n        // User is still playing, mark the item as 'clicked'\n        // Continue playing\n        this.state.numbers.forEach((num) => {\n          if (item.content == num.content) {\n            num.wasClicked = true;\n          }\n        });\n        this.setState({\n          score: this.state.score + 1,\n          bestScore:\n            this.state.bestScore > this.state.score\n              ? this.state.bestScore\n              : this.state.score + 1,\n          numbers: tempArray,\n        });\n      }\n    }\n  }\n\n  randomizeNumbers() {\n    let array = this.state.numbers;\n    let index = this.state.numbers.length,\n      temporaryIndex,\n      randomIndex;\n\n    while (0 !== index) {\n      randomIndex = Math.floor(Math.random() * index);\n      index -= 1;\n\n      temporaryIndex = array[index];\n      array[index] = array[randomIndex];\n      array[index].color = this.randomHEX();\n      array[randomIndex] = temporaryIndex;\n      array[randomIndex].color = this.randomHEX();\n    }\n\n    return array;\n  }\n\n  componentDidMount() {\n    let array = this.randomizeNumbers();\n    this.setState({ numbers: array });\n  }\n\n  render() {\n    return (\n      <main className=\"App\">\n        <header className=\"App-header\">\n          <h1>React Memory Game</h1>\n          <p>\n            Objective: Select a word that you haven't selected yet.<br></br>\n            Highest score is 10!\n          </p>\n          <div className=\"App-scoreboard\">\n            <span>Score: {this.state.score}</span>\n            <span>Best Score: {this.state.bestScore}</span>\n          </div>\n        </header>\n        <section className=\"App-container\">\n          <Congratulations />\n          <div className=\"App-item-container\">\n            {this.state.numbers.map((num) => {\n              return (\n                <GameItem\n                  key={num.content + \"_key\"}\n                  value={num}\n                  method={this.checkScore}\n                  color={num.color}\n                />\n              );\n            })}\n          </div>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","/Users/truecoders/repos/react/memory-game-complete/src/components/GameItem.jsx",[],"/Users/truecoders/repos/react/memory-game-complete/src/components/Congratulations.jsx",[],{"ruleId":"24","severity":1,"message":"25","line":113,"column":28,"nodeType":"26","messageId":"27","endLine":113,"endColumn":30},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]